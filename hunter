#!/usr/bin/env python3

"""Hunt for sex-specific transcripts in male/female assemblies.

What are we looking for?

=> Is it full of SNPs (rather than a splice variant)?

BLAST back against male assembly

=> Is there a higher identity hit could be an X allele?
"""

import os
import fasta
import pandas as pd
from numpy import nan
from blast import blast
from blast.parse import BlastResult

import logging
import logging.config
logging.config.fileConfig('logging/log.conf')
logger = logging.getLogger('root')


# Sequences to use as BLAST queries
MSP_cds = "data/MSP_cds.fas"
MSP_pep = "data/MSP_pep.fas"
FSP_cds = "data/FSP_cds.fas"
FSP_pep = "data/FSP_pep.fas"

# Assemblies to BLAST against
male_hp_cds = "blast/db/hp_m_cds.fas"
female_hp_cds = "blast/db/hp_f_cds.fas"
male_hp_pep = "blast/db/hp_m_pep.fas"
female_hp_pep = "blast/db/hp_f_pep.fas"

# %% Generate BLAST alignments

outfiles = []

blast_combos = [
    ("blastp", MSP_pep, female_hp_pep),
    ("blastp", FSP_pep, male_hp_pep),
]

for alg, query, db in blast_combos:
    outfile = blast.blast(alg, query, db)
    outfiles.append(outfile)

# %% Write output

for outfile in outfiles:
    result = BlastResult(outfile)
    result.to_csv(os.path.basename(outfile).replace('.xml', '.csv'))

# %% Filter alignments and CDS BLAST

# *** Males ***
mcds = pd.read_csv(MSP_cds.replace('.fas', '.csv'), index_col=0)
mpep = pd.read_csv(MSP_pep.replace('.fas', '.csv'), index_col=0)

# Filter out transcripts with no hits
mpep = mpep.loc[mpep['Identity_percent'] != nan]
# Filter to protein matches with reasonable but imperfect identity
mpep = mpep.loc[mpep['Identity_percent'] < 80].copy()
# Extract query:subject CDS sequences
mfas = fasta.read(male_hp_cds)
ffas = fasta.read(female_hp_cds)
mcds = {k: mfas[k] for k in mpep.index}
fcds = {k: ffas[k] for k in mpep.index}
cds_identities = []
# Pairwise BLAST CDS query:subject pairs and append identity% to CSV
for q_key, s_key in zip(mcds.keys(), fcds.keys()):
    query = mcds[q_key]
    subject = mcds[s_key]
    result = blast.pairwise_blast(query, subject)
    identity = result.iterations[0].hits[0].hsps[0].identity_pc
    with open('alignment_{ q_key }.txt', 'w') as f:
        f.write(result.report())
    cds_identities.append(identity)
mpep['CDS_identity'] = cds_identities


# *** Females ***
fcds = pd.read_csv(FSP_cds.replace('.fas', '.csv'), index_col=0)
fpep = pd.read_csv(FSP_pep.replace('.fas', '.csv'), index_col=0)

# Filter out transcripts with no hits
fpep = fpep.loc[fpep['Identity_percent'] != nan]
# Filter to protein matches with reasonable but imperfect identity
fpep = fpep.loc[fpep['Identity_percent'] < 80].copy()
# Extract query:subject CDS sequences for these and pairwise BLAST them
mfas = fasta.read(male_hp_cds)
ffas = fasta.read(female_hp_cds)
mcds = {k: mfas[k] for k in fpep.index}
fcds = {k: ffas[k] for k in fpep.index}
cds_identities = []

for q_key, s_key in zip(fcds.keys(), mcds.keys()):
    query = mcds[q_key]
    subject = mcds[s_key]
    result = blast.pairwise_blast(query, subject)
    identity = result.iterations[0].hits[0].hsps[0].identity_pc
    with open('alignment_{ q_key }.txt', 'w') as f:
        f.write(result.report())
    cds_identities.append(identity)

fpep['CDS_identity'] = cds_identities

# %% Write output to file
mpep.to_csv('MSP_pep_vs_cds.csv')
fpep.to_csv('FSP_pep_vs_cds.csv')

# %% Try and add annotations
try:
    m_ants = pd.read_csv(
        '../annotation/runs/run4/male_specific_n1900_pep.csv', index_col=0)
    f_ants = pd.read_csv(
        '../annotation/runs/run4/female_specific_n1825_pep.csv', index_col=0)
    mpep['Annotation'] = m_ants.reindex(mpep.index, inplace=True)['Definition']
    fpep['Annotation'] = f_ants.reindex(mpep.index, inplace=True)['Definition']
except Exception as exc:
    print("Error parsing annotations:\n", str(exc))
