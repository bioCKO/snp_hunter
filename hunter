#!/usr/bin/env python3

"""Hunt for sex-specific transcripts in male/female assemblies.

What are we looking for?

=> Is it full of SNPs (rather than a splice variant)?

BLAST back against male assembly

=> Is there a higher identity hit could be an X allele?
"""

import os
import fasta
import pandas as pd
from numpy import nan
from blast import blast
from blast.parse import BlastResult

import logging
import logging.config
logging.config.fileConfig('logging/log.conf')
logger = logging.getLogger(__name__)


# Sequences to use as BLAST queries
MSP_cds = "data/MSP_cds.fas"
MSP_pep = "data/MSP_pep.fas"
FSP_cds = "data/FSP_cds.fas"
FSP_pep = "data/FSP_pep.fas"

# Assemblies to BLAST against
male_hp_cds = "blast/db/hp_m_cds.fas"
female_hp_cds = "blast/db/hp_f_cds.fas"
male_hp_pep = "blast/db/hp_m_pep.fas"
female_hp_pep = "blast/db/hp_f_pep.fas"

# %% Generate BLAST alignments

outfiles = []

blast_combos = [
    ("blastp", MSP_pep, female_hp_pep),
    ("blastp", FSP_pep, male_hp_pep),
]


#for alg, query, db in blast_combos:
#    logger.info(f"Running {alg}: {query} => {db}...")
#    outfile = blast.blast(alg, query, db)
#    outfiles.append(outfile)

# %% Write output

# logger.info("Rendering BLAST output to CSV files...")
#for outfile in outfiles:
#    result = BlastResult(outfile)
#    result.to_csv(os.path.basename(outfile).replace('.xml', '.csv'))

# %% Filter alignments and CDS BLAST

if not os.path.exists('cds_alignments'):
    os.mkdir('cds_alignments')

# *** Males ***
logger.info("Filtering male-specific transcripts protein/CDS identity...")
m_result = MSP_pep.replace('data/', 'blastout_').replace('.fas', '.csv')
mpep = pd.read_csv(m_result, index_col=0)

# Filter out transcripts with no hits
mpep = mpep.loc[mpep['Identity_percent'] != nan]
# Filter to protein matches to alignments with imperfect identity
mpep = mpep.loc[mpep['Identity_percent'] < 80].copy()
# Extract query:subject CDS sequences
mfas = fasta.read(male_hp_cds.replace('blast/db', 'data'))
ffas = fasta.read(female_hp_cds.replace('blast/db', 'data'))
mcds = {k: mfas[k] for k in mpep.index}
fcds = {k: ffas[k] for k in mpep['Hit']}

cds_identities = []
# Pairwise BLAST CDS query:subject pairs and append identity% to CSV
for q_key, s_key in zip(mpep.index, mpep['Hit']):
    query = mcds[q_key]
    subject = fcds[s_key]
    result = blast.pairwise_blast('blastn', query, subject)
    try:
        identity = result.iterations[0].hits[0].hsps[0].identity_pc
    except IndexError:
        identity = 0
    with open(f'cds_alignments/alignment_M_{ q_key }.txt', 'w') as f:
        f.write(result.report())
    cds_identities.append(identity)
mpep['CDS_identity'] = cds_identities


# *** Females ***
logger.info("Filtering female-specific transcripts by protein/CDS identity...")
f_result = FSP_pep.replace('data/', 'blastout_').replace('.fas', '.csv')
fpep = pd.read_csv(f_result, index_col=0)

# Filter out transcripts with no hits
fpep = fpep.loc[fpep['Identity_percent'] != nan]
# Filter to protein matches with reasonable but imperfect identity
fpep = fpep.loc[fpep['Identity_percent'] < 80].copy()
# Extract query:subject CDS sequences for these and pairwise BLAST them
# mfas & ffas defined above
fcds = {k: ffas[k] for k in fpep.index}
mcds = {k: mfas[k] for k in fpep['Hit']}
cds_identities = []

for q_key, s_key in zip(fpep.index, fpep['Hit']):
    query = fcds[q_key]
    subject = mcds[s_key]
    result = blast.pairwise_blast('blastn', query, subject)
    try:
        identity = result.iterations[0].hits[0].hsps[0].identity_pc
    except IndexError:
        identity = None
    with open(f'cds_alignments/alignment_F_{ q_key }.txt', 'w') as f:
        f.write(result.report())
    cds_identities.append(identity)

fpep['CDS_identity'] = cds_identities

# %% Try and add annotations
logger.info("Appending annotations...")
try:
    m_ants = pd.read_csv('data/MSP_1900_annotated.csv', index_col=0)
    f_ants = pd.read_csv('data/FSP_1825_annotated.csv', index_col=0)
    mpep['Annotation'] = m_ants.reindex(mpep.index)['Definition']
    fpep['Annotation'] = f_ants.reindex(mpep.index)['Definition']
except Exception as exc:
    print("Error parsing annotations:\n", str(exc))

# %% Write output to file
logger.info("Writing output to file...")
mpep.to_csv('MSP_pep_vs_cds.csv')
fpep.to_csv('FSP_pep_vs_cds.csv')

logger.info("Hunting complete")
